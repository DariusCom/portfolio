export const challenges = [
  {
    title: "Evaluate mathematical expression",
    rating: 2,
    description:
      "Given a mathematical expression as a string you must return the result as a number.",
    instructions:
      "# Instructions\n\nGiven a mathematical expression as a string you must return the result as a number.\n\n## Numbers\n\nNumber may be both whole numbers and/or decimal numbers. The same goes for the returned result.\n\n## Operators\n\nYou need to support the following mathematical operators:\n\n* Multiplication `*`\n* Division `/` (as floating point division)\n* Addition `+`\n* Subtraction `-`\n\nOperators are always evaluated from left-to-right, and `*` and `/` must be evaluated before `+` and `-`.\n\n## Parentheses\n\nYou need to support multiple levels of nested parentheses, ex. ```(2 / (2 + 3.33) * 4) - -6```\n\n## Whitespace\n\nThere may or may not be whitespace between numbers and operators.\n\nAn addition to this rule is that the minus sign (`-`) used for negating numbers and parentheses will *never* be separated by whitespace. I.e all of the following are **valid** expressions.\n\n```\n1-1    // 0\n1 -1   // 0\n1- 1   // 0\n1 - 1  // 0\n1- -1  // 2\n1 - -1 // 2\n1--1   // 2\n\n6 + -(4)   // 2\n6 + -( -4) // 10\n```\n\nAnd the following are **invalid** expressions\n\n```\n1 - - 1    // Invalid\n1- - 1     // Invalid\n6 + - (4)  // Invalid\n6 + -(- 4) // Invalid\n```\n\n## Validation\n\nYou do not need to worry about validation - you will only receive **valid** mathematical expressions following the above rules.\n\n",
  },
  {
    title: "Integer Square Root",
    rating: 2,
    description:
      "For each given a number N, the integer S is called `integer square root`",
    instructions:
      '# Task\n For each given a number N, the integer S is called `integer square root` of N if `S x S <= N` and `(S+1) x (S+1) > N`.\n \n In other words, `S = Math.floor(Math.sqrt(N))`\n \n Your task is to calculate the `integer square root` of a given `Number`.\n \n Note: Input is given in string format. That is, the `Number` may be very very large ;-)\n \n# Example\n For: `Number = "4"`, result = `"2"`.\n \n For: `Number = "17"`, result = `"4"`.\n \n For: `Number = "101"`, result = `"10"`.\n \n For: `Number = "23232328323215435345345345343458098856756556809400840980980980980809092343243243243243098799634"`, result = `"152421548093487868711992623730429930751178496967"`.\n\n# Input/Output\n\n\n - `[input]` string `Number`\n\n  number in decimal form. `0 < Number < 10^100`\n\n\n - `[output]` a string\n\n  integer squareroot of `Number`.\n\n```if:c\n# for C users\n\nSometimes the test will timeout with a SIGKILL unexpectedly, you can simply re-submit.\n\nIf you got error too many times(like, 3 or more), it\'s probably your mistake.\n```\n\n```if:coffeescript\n# for CoffeeScript users\n\nFor some reason, your code length should less than 10240(10 KB), good luck `^_^`\n```\n\n```',
  },
  {
    title: "nth digit in infinite addition",
    rating: 3,
    description: "Let us write down the infinite consecutive positive...",
    instructions:
      "# Problem\n\nLet us write down the infinite consecutive positive integers in a sequence in one line without any space. And then write their squares in the second line. This will generate two different long numbers, now we want to calculate the sum of these two numbers. \n\nOf course, the result of the calculation will be a infinite sequence too. The calculation of the first 30 digits is just as below:\n```\n  123456789101112131415161718192...\n+ 149162536496481100121144169196...\n= 272619325597593231536305887388...\n```\n\nAs you can see, the first digit of the result is `2`, the second digit is `7`, and the third is `2` and so on. \n\nCan you find out the `n`<sub>th</sub> digit of this infinite sequence?\n\n\n\n# Task\n\nYou are given an integer `n`, you should output the digit at position `n` in the resulting infinite sequence.\n\nNote that `n` is 0-based. \n\nStill don't understand the problem? Look at the following examples:\n\n# Examples\n\nFor `n = 1`, the output should be `7`.\n\n```\n272619325597593231536305887388...\n ^\n 1st digit\n```\nFor `n = 5`, the output should be `9`.\n\n```\n272619325597593231536305887388...\n     ^\n     5th digit\n```\nFor `n = 29`, the output should be `8`.\n\n```\n272619325597593231536305887388...\n                             ^\n                             29th digit\n```\n\n\n# Note\n\n- `0 <= n < 2^31`\n\n- In order to avoid timeout, be aware of the code's performance ;-)\n\n~~~if:javascript\n- Something like `require(\"bignumber.js\")` was disabled. \n~~~\n~~~",
  },
  {
    title: "One Line Task: Check Range",
    rating: 3,
    description:
      "You're given an array of integers `a` and two integers `x` and `y`.",
    instructions:
      "# Task\nYou're given an array of integers `a` and two integers `x` and `y`. Count the number of elements in the array such that `x ≤ a[i] ≤ y, where i is the 0-based index of the element.\n\n# Code Limit\nLess than `48` characters.\n \n# Example\n\nFor `a = [2, 5, 6, 7, 1, 3, 4, 11, 56, 49], x = 1 and y = 7`,\n\nthe output should be `7`.\n\nelements `2, 5, 6, 7, 1, 3, 4` should be counted.\n",
  },
  {
    title: "The Lift",
    rating: 3,
    description: "A multi-floor building has a Lift in it",
    instructions:
      '*I bet you won\'t ever catch a Lift (a.k.a. elevator) again without thinking of this Kata !*\n\n<hr>\n\n# Synopsis\n\nA multi-floor building has a Lift in it.\n\nPeople are queued on different floors waiting for the Lift.\n\nSome people want to go up. Some people want to go down. \n\nThe floor they want to go to is represented by a number (i.e. when they enter the Lift this is the button they will press)\n\n```\nBEFORE (people waiting in queues)               AFTER (people at their destinations)\n                   +--+                                          +--+ \n  /----------------|  |----------------\\        /----------------|  |----------------\\\n10|                |  | 1,4,3,2        |      10|             10 |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 9|                |  | 1,10,2         |       9|                |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 8|                |  |                |       8|                |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 7|                |  | 3,6,4,5,6      |       7|                |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 6|                |  |                |       6|          6,6,6 |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 5|                |  |                |       5|            5,5 |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 4|                |  | 0,0,0          |       4|          4,4,4 |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 3|                |  |                |       3|            3,3 |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 2|                |  | 4              |       2|          2,2,2 |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n 1|                |  | 6,5,2          |       1|            1,1 |  |                |\n  |----------------|  |----------------|        |----------------|  |----------------|\n G|                |  |                |       G|          0,0,0 |  |                |\n  |====================================|        |====================================|\n```\n<hr>\n\n# Rules\n\n#### Lift Rules\n\n* The Lift only goes up or down!\n* Each floor has both UP and DOWN Lift-call buttons (except top and ground floors which have only DOWN and UP respectively)\n* The Lift never changes direction until there are no more people wanting to get on/off in the direction it is already travelling\n* When empty the Lift tries to be smart. For example,\n * If it was going up then it may continue up to collect the highest floor person wanting to go down\n * If it was going down then it may continue down to collect the lowest floor person wanting to go up\n* The Lift has a maximum capacity of people \n* When called, the Lift will stop at a floor **even if it is full**, although unless somebody gets off nobody else can get on!\n* If the lift is empty, and no people are waiting, then it will return to the ground floor\n \n#### People Rules\n\n* People are in **"queues"** that represent their order of arrival to wait for the Lift\n* All people can press the UP/DOWN Lift-call buttons\n* Only people going the **same direction** as the Lift may enter it\n* Entry is according to the **"queue" order**, but those unable to enter do not block those behind them that can\n* If a person is unable to enter a full Lift, they will press the UP/DOWN Lift-call button again after it has departed without them\n\n \n<hr> \n\n# Kata Task\n\n* Get all the people to the floors they want to go to while obeying the **Lift rules** and the **People rules**\n* Return a list of all floors that the Lift stopped at (in the order visited!)\n\nNOTE: The Lift always starts on the ground floor (and people waiting on the ground floor may enter immediately)\n\n<hr>\n\n# I/O\n\n#### Input\n\n* ```queues``` a list of queues of people for all floors of the building. \n * The height of the building varies\n * 0 = the ground floor\n * Not all floors have queues\n * Queue index [0] is the "head" of the queue\n * Numbers indicate which floor the person wants go to\n* ```capacity``` maximum number of people allowed in the lift\n\n*Parameter validation* - All input parameters can be assumed OK. No need to check for things like:\n\n* People wanting to go to floors that do not exist\n* People wanting to take the Lift to the floor they are already on\n* Buildings with < 2 floors\n* Basements\n\n#### Output\n\n* A list of all floors that the Lift stopped at (in the order visited!)\n\n<hr>\n\n# Example\n\nRefer to the example test cases.\n\n<hr>\n\n# Language Notes\n\n* Python : The object will be initialized for you in the tests\n\n<hr>\n<span style="color:red">\nGood Luck -\n\nDM\n\n</span>\n\n\n\n\n\n',
  },
  {
    title: "Array.diff",
    rating: 6,
    description:
      "Your goal in this kata is to implement a difference function, which subtracts",
    instructions:
      "Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.\n\nIt should remove all values from list `a`, which are present in list `b` keeping their order.\n\n```javascript\narrayDiff([1,2],[1]) == [2]\n```\n\nIf a value is present in `b`, all of its occurrences must be removed from the other:\n\n```javascript\narrayDiff([1,2,2,2,3],[2]) == [1,3]\n",
  },
  {
    title: "Center of attention",
    rating: 3,
    description:
      "For this kata, we're given an image in which some object of interest",
    instructions:
      "For this kata, we're given an image in which some object of interest (e.g. a face, or a license plate, or an aircraft) appears as a large block of contiguous pixels all of the same colour. (Probably some image-processing has already occurred to achieve this, but we needn't worry about that.) We want to find the **centre** of the object in the image.\n\nWe'll do this by finding which pixels of the given colour have maximum depth. The depth of a pixel P is the minimum number of steps (up, down, left, or right) you have to take from P to reach either a pixel of a different colour or the edge of the image.\n\n![pixel depths pic](http://www.stat.auckland.ac.nz/~geoff/codewars/pixeldepthspic.png)\n\nIn the picture, the red pixel marked \"3\" has a depth of 3: it takes at least 3 steps from there to reach something other than another red pixel. Note that the steps need not be all in the same direction. Only one red pixel has depth 3: the one right in the middle of the red region. Similarly, the blue pixel marked \"2\" has a depth of 2 (but it is not the only one with this depth). The green and purple pixels all have depth 1.\n\nThe pixels of a given colour with the largest depth will be found at the centre of the biggest solid region(s) of that colour. Those are the ones we want.\n\nThe function you'll write (```central_pixels```) belongs to the following data structure:\n```cpp\nstruct Image\n{\n unsigned *pixels;\n unsigned width, height;\n \n vector<unsigned> central_pixels(unsigned colour) const;\n // other functions ...\n};\n```\n```c\ntypedef struct\n{\n unsigned *pixels;\n unsigned width, height;\n} Image;\n```\n```java\npublic class Image\n{\n int[] pixels;\n int width, height;\n \n // functions ...\n}\n```\n```javascript\nclass Image\n{\n constructor(data, w, h)\n {\n  this.pixels = data.slice();\n  this.width = w;\n  this.height = h;\n }\n}\n```\n```python\nclass Image:\n  def __init__(self, data, w, h): \n    self.pixels = data\n    self.width = w\n    self.height = h\n```\nThe image data consists of a one-dimensional array ```pixels``` of unsigned integers (or just integers, in languages that don't have unsigned integers as such), which correspond to pixels in row-by-row order. (That is, the top row of pixels comes first, from left to right, then the second row, and so on, with the pixel in the bottom right corner last of all.) The values of the ```pixels``` array elements represent colours via some one-to-one mapping whose details need not concern us.\n\nThe ```central_pixels``` function should find and return all the positions (```pixels``` array indices) of the pixels having the greatest depth among all pixels of colour ```colour```).\n\n**Note 1.**  The final test in the suite (```Big_Test```) is a 16-megapixel image (1 megapixel in the Python version), so you will need to consider the time and space requirements of your solution for images up to that size.\n\n**Note 2.**  The order of pixel positions in the returned array is not important; sort them however you like.\n\n**Hint.** It is possible to get this done in **two** passes through the pixel data.\n\n\n",
  },
  {
    title: "Make a spiral",
    rating: 3,
    description: "Your task, is to create a NxN spiral with a given `size`",
    instructions:
      "Your task, is to create a NxN spiral with a given `size`.\n\nFor example, spiral with size 5 should look like this:\n\n```\n00000\n....0\n000.0\n0...0\n00000\n```\n\nand with the size 10:\n\n```\n0000000000\n.........0\n00000000.0\n0......0.0\n0.0000.0.0\n0.0..0.0.0\n0.0....0.0\n0.000000.0\n0........0\n0000000000\n```\n\nReturn value should contain array of arrays, of `0` and `1`, with the first row being composed of `1`s.\nFor example for given size `5` result should be:\n\n\n```javascript\n[[1,1,1,1,1],[0,0,0,0,1],[1,1,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n```\n```lua\n{{1,1,1,1,1},{0,0,0,0,1},{1,1,1,0,1},{1,0,0,0,1},{1,1,1,1,1}}\n```\n```rust\n[[1,1,1,1,1],[0,0,0,0,1],[1,1,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n```\n```julia\n[1 1 1 1 1; 0 0 0 0 1; 1 1 1 0 1; 1 0 0 0 1; 1 1 1 1 1]\n```\n```go\n[[1,1,1,1,1],[0,0,0,0,1],[1,1,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n```\nBecause of the edge-cases for tiny spirals, the size will be at least 5.\n\nGeneral rule-of-a-thumb is, that the snake made with '1' cannot touch to itself.\n",
  },
  {
    title: "Path Finder",
    rating: 4,
    description:
      "You are at position [0, 0] in maze NxN and you can only move in one of the",
    instructions:
      "## Task\n\n~~~if-not:julia\nYou are at position [0, 0] in maze NxN and you can **only** move in one of the four cardinal directions (i.e. North, East, South, West).  Return `true` if you can reach position [N-1, N-1] or `false` otherwise.\n~~~\n~~~if:julia\nYou are at position [1, 1] in maze NxN and you can **only** move in one of the four cardinal directions (i.e. North, East, South, West).  Return `true` if you can reach position [N, N] or `false` otherwise.\n~~~\n\n* Empty positions are marked `.`.\n* Walls are marked `W`.\n* Start and exit positions are empty in all test cases.\n\n",
  },
  {
    title: "Ten-Pin Bowling",
    rating: 4,
    description:
      "In the game of ten-pin bowling, a player rolls a bowling ball down",
    instructions:
      "# Ten-Pin Bowling\n\nIn the game of ten-pin bowling, a player rolls a bowling ball down a lane to knock over pins. There are ten pins set at the end of the bowling lane. Each player has 10 frames to roll a bowling ball down a lane and knock over as many pins as possible. The first nine frames are ended after two rolls or when the player knocks down all the pins. The last frame a player will receive an extra roll every time they knock down all ten pins; up to a maximum of three total rolls. \n\n## The Challenge\n\nIn this challenge you will be given a string representing a player's ten frames. It will look something like this: `'X X 9/ 80 X X 90 8/ 7/ 44'` (in Java: `\"X X 9/ 80 X X 90 8/ 7/ 44\"`), where each frame is space-delimited, `'X'` represents strikes, and `'/'` represents spares. Your goal is take in this string of frames into a function called `bowlingScore` and return the players total score.\n\n## Scoring\n\nThe scoring for ten-pin bowling can be difficult to understand, and if you're like most people, easily forgotten if you don't play often. Here is a quick breakdown:\n\n### Frames\n\nIn Ten-Pin Bowling there are ten frames per game. Frames are the players turn to bowl, which can be multiple rolls. The first 9 frames you get 2 rolls maximum to try to get all 10 pins down. **On the 10th or last frame a player will receive an extra roll each time they get all ten pins down to a maximum of three total rolls. Also on the last frame bonuses are not awarded for strikes and spares moving forward.**\n\nIn this challenge, three frames might be represented like this: `54 72 44`. In this case, the player has had three frames. On their first frame they scored 9 points (5 + 4), on their second frame they scored 9 points (7 + 2) and on their third frame they scored 8 points (4 + 4). This is a very simple example of bowling scoring. It gets more complicated when we introduce strikes and spares.\n\n### Strikes \nRepresented in this challenge as `'X'`\n\nA strike is scored when a player knocks all ten pins down in one roll. In the first 9 frames this will conclude the players turn and it will be scored as 10 points plus the points received from the next two rolls. So if a player were to have two frames `X 54`, the total score of those two frames would be 28. The first frame would be worth 19 (10 + 5 + 4) and the second frame would be worth 9 (5 + 4).\n\nA perfect game in bowling is 12 strikes in a row and would be represented like this `'X X X X X X X X X XXX'` (in Java: `\"X X X X X X X X X XXX\"`). This adds up to a total score of 300.\n\n### Spares\nRepresented in this challenge as `'/'`\n\nA spare is scored when a player knocks down all ten pins in two rolls. In the first 9 frames this will be scored as 10 points plus the next roll. So if a player were to have two frames `9/ 54`, the total score of the two frames would be 24. The first frame would be worth 15 (10 + 5) and the second frame would be worth 9 (5 + 4).\n\nFor a more detailed explanation see Wikipedia: \n\nhttp://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring\n",
  },
  {
    title: "One Line Task: Squirrel And Tree",
    rating: 4,
    description:
      "Since the weather was good, some students decided to go for a walk",
    instructions:
      "# Task\n Since the weather was good, some students decided to go for a walk in the park after the first lectures of the new academic year. There they saw a squirrel, which climbed a tree in a spiral at a constant angle to the ground. They calculated that in one loop the squirrel climbes `h` meters (vertical height), the height of the tree is equal to `H` (`v` in Ruby), and the length of its circumference equals `S`.\n\n These calculations were exhausting, so now the students need your help to figure out how many meters the path length of squirrel climbed when it reached the tree top. The result should be rounded to 4 decimal places.\n\n# Code Limit\n\n Less than `52` characters (JavaScript & Python) \n \n Less than `48` characters (Ruby)\n \n# Example\n\n  For `h = 4, H = 16, S = 3`, the output should be `20`.\n  \n  For `h = 8, H = 9, S = 37`, the output should be `42.5869`.",
  },
  {
    title: "Validate Sudoku with size `NxN`",
    rating: 4,
    description:
      "Given a Sudoku data structure with size `NxN, N > 0 and √N == integer`",
    instructions:
      "Given a Sudoku data structure with size `NxN, N > 0 and √N == integer`, write a method to validate if it has been filled out correctly.\n\n\nThe data structure is a multi-dimensional Array, i.e:\n```\n[\n  [7,8,4,  1,5,9,  3,2,6],\n  [5,3,9,  6,7,2,  8,4,1],\n  [6,1,2,  4,3,8,  7,5,9],\n  \n  [9,2,8,  7,1,5,  4,6,3],\n  [3,5,7,  8,4,6,  1,9,2],\n  [4,6,1,  9,2,3,  5,8,7],\n  \n  [8,7,6,  3,9,4,  2,1,5],\n  [2,4,3,  5,6,1,  9,7,8],\n  [1,9,5,  2,8,7,  6,3,4]\n]\n```\n\n**Rules for validation**\n\n- Data structure dimension: `NxN` where `N > 0` and `√N == integer`\n- Rows may only contain integers: `1..N (N included)`\n- Columns may only contain integers: `1..N (N included)`\n- *'Little squares'* (`3x3` in example above) may also only contain integers: `1..N (N included)`\n",
  },
  {
    title: "Explosive Sum",
    rating: 4,
    description: "How many ways can you make the sum of a number?",
    instructions:
      "# How many ways can you make the sum of a number?\n\nFrom wikipedia: https://en.wikipedia.org/wiki/Partition_(number_theory)\n\n>In number theory and combinatorics, a partition of a positive integer *n*, also called an *integer partition*, is a way of writing n as a sum of positive integers. Two sums that differ only in the order of their summands are considered the same partition. If order matters, the sum becomes a composition. For example, 4 can be partitioned in five distinct ways:\n```\n4\n3 + 1\n2 + 2\n2 + 1 + 1\n1 + 1 + 1 + 1\n```\n\n## Examples\n\n### Basic\n\n```javascript\nsum(1) // 1\nsum(2) // 2  -> 1+1 , 2\nsum(3) // 3 -> 1+1+1, 1+2, 3\nsum(4) // 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nsum(5) // 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nsum(10) // 42\n```\n```haskell\nexplosiveSum  1   -- 1\nexplosiveSum 2   -- 2 -> 1+1 , 2\nexplosiveSum 3   -- 3 -> 1+1+1, 1+2, 3\nexplosiveSum 4   -- 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nexplosiveSum 5   -- 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nexplosiveSum 10  -- 42\n```\n```ruby\nexp_sum(1) # 1\nexp_sum(2) # 2  -> 1+1 , 2\nexp_sum(3) # 3 -> 1+1+1, 1+2, 3\nexp_sum(4) # 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nexp_sum(5) # 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nexp_sum(10) # 42\n```\n```python\nexp_sum(1) # 1\nexp_sum(2) # 2  -> 1+1 , 2\nexp_sum(3) # 3 -> 1+1+1, 1+2, 3\nexp_sum(4) # 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nexp_sum(5) # 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nexp_sum(10) # 42\n```\n```cpp\nexp_sum(1) // 1\nexp_sum(2) // 2  -> 1+1 , 2\nexp_sum(3) // 3 -> 1+1+1, 1+2, 3\nexp_sum(4) // 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nexp_sum(5) // 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nexp_sum(10) // 42\n```\n\n### Explosive\n\n```javascript\nsum(50) // 204226\nsum(80) // 15796476\nsum(100) // 190569292\n```\n```haskell\nexplosiveSum  50 --    204226\nexplosiveSum  80 --  15796476\nexplosiveSum 100 -- 190569292\n```\n```ruby\nexp_sum(50) # 204226\nexp_sum(80) # 15796476\nexp_sum(100) # 190569292\n```\n```python\nexp_sum(50) # 204226\nexp_sum(80) # 15796476\nexp_sum(100) # 190569292\n```\n```cpp\nexp_sum(50) // 204226\nexp_sum(80) // 15796476\nexp_sum(100) // 190569292\n```\n\nSee [here](http://www.numericana.com/data/partition.htm) for more examples.\n",
  },
  {
    title: "Advanced Pig Latin",
    rating: 5,
    description:
      "Pig latin is created by taking all the consonants before the first",
    instructions:
      'Pig latin is created by taking all the consonants before the first vowel of a word and moving them to the back of the word followed by the letters "ay".\n```javascript\n"hello" => "ellohay"\n"creating" => "eatingcray"\n```\n  \nIf the first letter of the word is a vowel, the string is left the same and the letters "way" are appended to the end.\n```javascript\n"algorithm" => "algorithmway"\n```\nThis problem is different from other variations in that it expects casing to remain the same so:\n```javascript\n"Hello World" => "Ellohay Orldway"\n```\nas well as punctuation.\n```javascript\n"Pizza? Yes please!" => "Izzapay? Esyay easeplay!"\n```\n\nYour job is to take a string and translate it to Pig Latin. The string will never be undefined but may contain both numbers and letters. A word will __never__ be a combination of numbers and letters. Also, there will __never__ be punctuation at the beginning of a word and the __only__ capital letter in a word will be the first letter meaning there are __zero__ all capitalized words.',
  },
  {
    title: "Snail",
    rating: 4,
    description:
      "Given an `n x n` array, return the array elements arranged from",
    instructions:
      '## Snail Sort\n\nGiven an `n x n` array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.\n\n```\narray = [[1,2,3],\n         [4,5,6],\n         [7,8,9]]\nsnail(array) #=> [1,2,3,6,9,8,7,4,5]\n```\n\nFor better understanding, please follow the numbers of the next array consecutively:\n\n```\narray = [[1,2,3],\n         [8,9,4],\n         [7,6,5]]\nsnail(array) #=> [1,2,3,4,5,6,7,8,9]\n```\n\nThis image will illustrate things more clearly:\n\n<img src="http://www.haan.lu/files/2513/8347/2456/snail.png" />\n\nNOTE: The idea is not sort the elements from the lowest value to the highest; the idea is to traverse the 2-d array in a clockwise snailshell pattern.\n\nNOTE 2: The 0x0 (empty matrix) is represented as en empty array inside an array `[[]]`.\n',
  },
  {
    title: "Compose functions",
    rating: 5,
    description:
      "Let's make a function called compose that accepts a value as a parameter",
    instructions:
      "Let's make a function called **compose** that accepts a value as a parameter, as well as any number of functions as additional parameters.\n\nThe function will return the value that results from the first parameter being used as a parameter for all of the accepted function parameters in turn. \n\n```javascript\ncompose(n, f1, f2, f3..., fn) // === fn(...(f3(f2(f1(n)))))\n```\n\nSo:\n\n```javascript\nvar doubleTheValue = function(val) { return val * 2; }\nvar addOneToTheValue = function(val) { return val + 1; }\n\ncompose(5, doubleTheValue) // should === 10\ncompose(5, doubleTheValue, addOneToTheValue) // should === 11\n```\n\nIf only a single parameter is passed in, return that parameter.\n\n```javascript\ncompose(n) = n\n```",
  },
  {
    title: "Regex Password Validation",
    rating: 5,
    description:
      "You need to write regex that will validate a password to make sure it meets the",
    instructions:
      "You need to write regex that will validate a password to make sure it meets the following criteria:\n\n* At least six characters long\n* contains a lowercase letter\n* contains an uppercase letter\n* contains a digit\n* only contains alphanumeric characters (note that `'_'` is not alphanumeric)",
  },
  {
    title: "Binary multiple of 3",
    rating: 3,
    description:
      "In this kata, your task is to create a regular expression capable of evaluating binary",
    instructions:
      "In this kata, your task is to create a regular expression capable of evaluating binary strings (strings with only `1`s and `0`s) and determining whether the given string represents a number divisible by 3.\n\nTake into account that:\n\n* An empty string *might* be evaluated to true (it's not going to be tested, so you don't need to worry about it - unless you want)\n* The input should consist only of binary digits - no spaces, other digits, alphanumeric characters, etc.\n* There might be leading `0`s.\n\n```if-not:julia\n### Examples (Javascript)\n* `multipleof3Regex.test('000')` should be `true`\n* `multipleof3Regex.test('001')` should be `false`\n* `multipleof3Regex.test('011')` should be `true`\n* `multipleof3Regex.test('110')` should be `true`\n* `multipleof3Regex.test(' abc ')` should be `false`\n```\n```if:julia\n### Examples\n* `occursin(multipleof3regex, '000')` should be `true`\n* `occursin(multipleof3regex, '001')` should be `false`\n* `occursin(multipleof3regex, '011')` should be `true`\n* `occursin(multipleof3regex, '110')` should be `true`\n* `occursin(multipleof3regex, ' abc ')` should be `false`\n```\n\nYou can check more in the example test cases\n\n### Note\nThere's a way to develop an automata (FSM) that evaluates if strings representing numbers in a given base are divisible by a given number. You might want to check an example of an automata for doing this same particular task [here](http://math.stackexchange.com/questions/140283/why-does-this-fsm-accept-binary-numbers-divisible-by-three).\n\nIf you want to understand better the inner principles behind it, you might want to study how to get the modulo of an arbitrarily large number taking one digit at a time.",
  },
  {
    title: "String incrementer",
    rating: 5,
    description:
      "Your job is to write a function which increments a string, to create a new string",
    instructions:
      "Your job is to write a function which increments a string, to create a new string.\n\n- If the string already ends with a number, the number should be incremented by 1.\n- If the string does not end with a number. the number 1 should be appended to the new string.\n\nExamples:\n\n`foo -> foo1`\n\n`foobar23 -> foobar24`\n\n`foo0042 -> foo0043`\n\n`foo9 -> foo10`\n\n`foo099 -> foo100`\n\n*Attention: If the number has leading zeros the amount of digits should be considered.*\n",
  },
  {
    title: "Human readable duration format",
    rating: 4,
    description:
      "Write a function, which takes a non-negative integer (seconds) as input and returns the time in a human-readable format",
    instructions:
      "Write a function, which takes a non-negative integer (seconds) as input and returns the time in a human-readable format (`HH:MM:SS`)\n\n* `HH` = hours, padded to 2 digits, range: 00 - 99\n* `MM` = minutes, padded to 2 digits, range: 00 - 59\n* `SS` = seconds, padded to 2 digits, range: 00 - 59\n\nThe maximum time never exceeds 359999 (`99:59:59`)\n\nYou can find some examples in the test fixtures.",
  },
  {
    title: "Range Extraction",
    rating: 4,
    description:
      "A format for expressing an ordered list of integers is to use a comma",
    instructions:
      'A format for expressing an ordered list of integers is to use a comma separated list of either\n\n* individual integers\n* or a range of integers denoted by the starting integer separated from the end integer in the range by a dash, \'-\'. The range includes all integers in the interval including both endpoints.  It is not considered a range unless it spans at least 3 numbers. For example "12,13,15-17"\n\nComplete the solution  so that it takes a list of integers in increasing order and returns a correctly formatted string in the range format. \n\n**Example:**\n\n```javascript\nsolution([-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20]);\n// returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n```coffeescript\nsolution([-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20])\n# returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n```ruby\nsolution([-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20])\n# returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n```python\nsolution([-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20])\n# returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n```java\nSolution.rangeExtraction(new int[] {-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20})\n# returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n```C#\nRangeExtraction.Extract(new[] {-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20});\n# returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n```VB\nRangeExtraction.Extract({-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20});\n# returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n```cpp\nrange_extraction({-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20});\n// returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n```c\nrange_extraction((const []){-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20}, 20);\n/* returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20" */\n```\n```nasm\nnums:  dd  -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20\n\nmov rdi, nums\nmov rsi, 20\ncall range_extraction\n; RAX <- `-10--8,-6,-3-1,3-5,7-11,14,15,17-20\\0`\n```\n```julia\nrangeextraction([-10 -9 -8 -6 -3 -2 -1 0 1 3 4 5 7 8 9 10 11 14 15 17 18 19 20])\n# returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n```scala\nsolution(List(-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20))\n// "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n```racket\n(solution \'(-10 -9 -8 -6 -3 -2 -1 0 1 3 4 5 7 8 9 10 11 14 15 17 18 19 20))\n; returns "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n```php\nsolution([-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20])\n// returns \'-10--8,-6,-3-1,3-5,7-11,14,15,17-20\'\n```\n\n```cobol\n        Rangeextraction\n        xs = [-10, -9, -8, -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, \n             14, 15, 17, 18, 19, 20]\n        res = "-10--8,-6,-3-1,3-5,7-11,14,15,17-20"\n```\n\n*Courtesy of rosettacode.org*\n\n',
  },
  {
    title: "Gap in Primes",
    rating: 5,
    description:
      "The prime numbers are not regularly spaced. For example from `2` to `3` the gap",
    instructions:
      "The prime numbers are not regularly spaced. For example from `2` to `3` the gap is `1`.\nFrom `3` to `5` the gap is `2`. From `7` to `11` it is `4`.\nBetween 2 and 50 we have the following pairs of 2-gaps primes:\n`3-5, 5-7, 11-13, 17-19, 29-31, 41-43`\n\nA prime gap of length n is a run of n-1 consecutive composite numbers between two **successive** primes (see: http://mathworld.wolfram.com/PrimeGaps.html).\n\nWe will write a function gap with parameters:\n\n- `g` (integer >= 2) which indicates the gap we are looking for\n\n- `m` (integer > 2) which gives the start of the search (m inclusive)\n\n- `n` (integer >= m) which gives the end of the search (n inclusive)\n\nIn the example above `gap(2, 3, 50)` will return `[3, 5] or (3, 5) or {3, 5}` which is the first pair between 3 and 50 with a 2-gap.\n\nSo this function should return the **first** pair of two prime numbers spaced with a gap of `g` between the limits `m`, `n` if these numbers exist otherwise `nil or null or None or Nothing (or ... depending on the language). \n```\nIn such a case (no pair of prime numbers with a gap of `g`)\nIn C: return [0, 0]\nIn C++, Lua, COBOL: return `{0, 0}`. \nIn F#: return `[||]`. \nIn Kotlin, Dart and Prolog: return `[]`.\nIn Pascal: return Type TGap (0, 0).\n\n```\n#### Examples:\n- \n`gap(2, 5, 7) --> [5, 7] or (5, 7) or {5, 7}`\n\n- `gap(2, 5, 5) --> nil. In C++ {0, 0}. In F# [||]. In Kotlin, Dart and Prolog return `[]`\n\n- `gap(4, 130, 200) --> [163, 167] or (163, 167) or {163, 167}`\n\n([193, 197] is also such a 4-gap primes between 130 and 200 but it's not the first pair)\n\n- `gap(6,100,110) --> nil or {0, 0} or ...` : between 100 and 110 we have `101, 103, 107, 109` but `101-107`is not a 6-gap because there is `103`in between and `103-109`is not a 6-gap because there is `107`in between.\n\n- You can see more examples of return in Sample Tests.\n\n#### Note for Go\nFor Go: nil slice is expected when there are no gap between m and n.\nExample: gap(11,30000,100000) --> nil\n\n#### Ref\nhttps://en.wikipedia.org/wiki/Prime_gap\n\n",
  },
  {
    title: "Calculating with Functions",
    rating: 5,
    description:
      "This time we want to write calculations using functions and get the results",
    instructions:
      'This time we want to write calculations using functions and get the results. Let\'s have a look at some examples:\n\n```javascript\nseven(times(five())); // must return 35\nfour(plus(nine())); // must return 13\neight(minus(three())); // must return 5\nsix(dividedBy(two())); // must return 3\n```\n```haskell\nseven $ times $ five   ->  35 :: Int\nfour $ plus $ nine     ->  13 :: Int\neight $ minus $ three  ->   5 :: Int\nsix $ dividedBy $ two  ->   3 :: Int\n```\n```ruby\nseven(times(five)) # must return 35\nfour(plus(nine)) # must return 13\neight(minus(three)) # must return 5\nsix(divided_by(two)) # must return 3\n```\n```python\nseven(times(five())) # must return 35\nfour(plus(nine())) # must return 13\neight(minus(three())) # must return 5\nsix(divided_by(two())) # must return 3\n```\n```factor\nseven multiplied-by five   ! must evaluate to 35\nfour plus nine             ! must evaluate to 13\neight minus three          ! must evaluate to 5\nsix divided-by two         ! must evaluate to 3\n```\n\nRequirements:\n~~~if:ruby,python\n* There must be a function for each number from 0 ("zero") to 9 ("nine")\n* There must be a function for each of the following mathematical operations: plus, minus, times, divided_by\n* Each calculation consist of exactly one operation and two numbers\n* The most outer function represents the left operand, the most inner function represents the right operand\n* Division should be **integer division**. For example, this should return `2`, not `2.666666...`:\n~~~\n~~~if:factor\n* There must be a word for each number from 0 ("zero") to 9 ("nine")\n* There must be a word for each of the following mathematical operations: plus, minus, multiplied-by, divided-by\n* Each calculation consist of exactly one operation and two numbers\n* The leftmost word represents the left operand, the rightmost word represents the right operand\n* Division should be **integer division**. For example, this should return `2`, not `2.666666...`:\n~~~\n~~~if-not:ruby,python,factor\n* There must be a function for each number from 0 ("zero") to 9 ("nine")\n* There must be a function for each of the following mathematical operations: plus, minus, times, dividedBy\n* Each calculation consist of exactly one operation and two numbers\n* The most outer function represents the left operand, the most inner function represents the right operand\n* Division should be **integer division**. For example, this should return `2`, not `2.666666...`:\n~~~\n\n',
  },
];
